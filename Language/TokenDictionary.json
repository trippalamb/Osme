{
  "words": {
    "identifier": {
      "variable": {
        "match": "[a-zA-Z_][\\w]*"
      }
    },
    "keyword": {
      "do_open": {
        "symbol": "do"
      },
      "while_open": {
        "symbol": "while"
      },
      "until_open": {
        "symbol": "until"
      },
      "do_close": {
        "symbol": "end do"
      },
      "if_open": {
        "symbol": "if"
      },
      "else_if": {
        "symbol": "else if"
      },
      "else": {
        "symbol": "else"
      },
      "if_close": {
        "symbol": "end if"
      },
      "integer": {
        "symbol": "integer"
      },
      "real": {
        "symbol": "real"
      },
      "imaginary": {
        "symbol": "imaginary"
      },
      "complex": {
        "symbol": "complex"
      },
      "boolean": {
        "symbol": "boolean"
      },
      "string": {
        "symbol": "string"
      },
      "function": {
        "symbol": "function"
      },
      "subroutine": {
        "symbol": "subroutine"
      },
      "class": {
        "symbol": "class"
      },
      "true": {
        "symbol": "true"
      },
      "false": {
        "symbol": "false"
      }
    }
  },
  "literals": {
    "number": {
      "integer": {
        "match": "[+-]\\d+"
      },
      "real": {
        "match": "^[-+]?\\d*\\.?\\d+([eE][-+]?[\\d]+)?"
      },
      "imaginary": {
        "match": "^[-+]?\\d*\\.?\\d+([eE][-+]?[\\d]+)?i"
      }
    },
    "string": {
      "string_dquote": {
        "match": "\"[\\s\\S]*?\""
      },
      "string_squote": {
        "match": "'[\\s\\S]*?'"
      }
    }
  },
  "commenters": {
    "inline_comment": {
      "match": "#.*$"
    },
    "multi_comment": {
      "match": "#([\\s\\S]*?)#"
    }
  },
  "punctuation": {
    "container": {
      "expression_open": {
        "symbol": "(",
        "precedece": "container"
      },
      "expression_close": {
        "symbol": ")",
        "precedece": "container"
      },
      "vector_open": {
        "symbol": "<",
        "precedece": "container"
      },
      "vector_close": {
        "symbol": ">",
        "precedece": "container"
      },
      "dict_open": {
        "symbol": "{",
        "precedece": "container"
      },
      "dict_close": {
        "symbol": "}",
        "precedece": "container"
      },
      "tuple_open": {
        "symbol": "[",
        "precedece": "container"
      },
      "tuple_close": {
        "symbol": "]",
        "precedece": "container"
      }
    },
    "separator": {
      "delimiter": {
        "symbol": ",",
        "precedence": "separator"
      }
    }
  },
  "operators": {
    "assignment": {
      "assign": {
        "symbol": "=",
        "precendece": "assignment"
      },
      "defined-as": {
        "symbol": "::=",
        "precendece": "assignment"
      },
      "point": {
        "symbol": "->",
        "precendece": "assignment"
      }
    },
    "property": {
      "field_of": {
        "symbol": ":"
      },
      "instance_of": {
        "symbol": "::"
      }
    },
    "expansion": {
      "range": {
        "symbol": "..."
      },
      "by": {
        "symbol": ".."
      }
    },
    "math": {
      "add": {
        "symbol": "+",
        "precendence": "add_ops"
      },
      "subtract": {
        "symbol": "-",
        "precendence": "add_ops"
      },
      "multiply": {
        "symbol": "+",
        "precendence": "mul_ops"
      },
      "divide": {
        "symbol": "/",
        "precendence": "mul_ops"
      },
      "power": {
        "symbol": "^",
        "precendence": "pow_ops"
      },
      "root": {
        "symbol": "^/",
        "precendence": "pow_ops"
      }
    },
    "comparison": {
      "is": {
        "symbol": "?:=",
        "precendence": "comparison"
      },
      "is_approximately": {
        "symbol": "?~",
        "precedence": "comparison"
      },
      "is_equivalent": {
        "symbol": "?=",
        "precendence": "comparison"
      },
      "is_not_equivalent": {
        "symbol": "?/=",
        "precendence": "comparison"
      },
      "is_lt": {
        "symbol": "?<",
        "precendence": "comparison"
      },
      "is_gt": {
        "symbol": "?>",
        "precendence": "comparison"
      },
      "is_le": {
        "symbol": "?<=",
        "precendence": "comparison"
      },
      "is_ge": {
        "symbol": "?>=",
        "precendence": "comparison"
      }
    },
    "logical": {
      "not": {
        "symbol": "!",
        "precedence": "logical"
      },
      "and": {
        "symbol": "&&",
        "precedence": "logical"
      },
      "or": {
        "symbol": "|&",
        "precedence": "logical"
      },
      "xor": {
        "symbol": "!&",
        "precedence": "logical"
      }
    }
  },
  "containerTokens": {
    "expression": {
      "start": "expression_open",
      "end": "expression_close",
      "name": "expression"
    },
    "vector": {
      "start": "vector_open",
      "end": "vector_close",
      "name": "vector"
    },
    "tuple": {
      "start": "tuple_open",
      "end": "tuple_close",
      "name": "tuple"
    },
    "dict": {
      "start": "dict_open",
      "end": "dict_close",
      "name": "dict"
    },
    "function": {
      "start": "fxn_open",
      "end": "fxn_close",
      "name": "function"
    },
    "subroutine": {
      "start": "sub_open",
      "end": "sub_close",
      "name": "subroutine"
    },
    "do": {
      "start": "do_open",
      "end": "do_close",
      "name": "do"
    },
    "if": {
      "start": "if_open",
      "end": "if_close",
      "name": "if"
    }
  }
}
